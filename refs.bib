
@InProceedings{boehm2008foundations,
  author    = {Boehm, Hans-J. and Adve, Sarita V.},
  title     = {Foundations of the C++ Concurrency Memory Model},
  booktitle = {Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2008},
  series    = {PLDI '08},
  publisher = {ACM},
  location  = {Tucson, AZ, USA},
  isbn      = {978-1-59593-860-2},
  pages     = {68--78},
  doi       = {10.1145/1375581.1375591},
  url       = {http://doi.acm.org/10.1145/1375581.1375591},
  acmid     = {1375591},
  address   = {New York, NY, USA},
  keywords  = {c++, data race, memory consistency, memory model, sequential consistency, trylock},
  numpages  = {11},
}

@Article{adve1996shared,
  author   = {S. V. Adve and K. Gharachorloo},
  title    = {Shared memory consistency models: a tutorial},
  journal  = {Computer},
  year     = {1996},
  volume   = {29},
  number   = {12},
  month    = {Dec},
  pages    = {66-76},
  issn     = {0018-9162},
  doi      = {10.1109/2.546611},
  abstract = {The memory consistency model of a system affects performance, programmability, and portability. We aim to describe memory consistency models in a way that most computer professionals would understand. This is important if the performance-enhancing features being incorporated by system designers are to be correctly and widely used by programmers. Our focus is consistency models proposed for hardware-based shared memory systems. Most of these models emphasize the system optimizations they support, and we retain this system-centric emphasis. We also describe an alternative, programmer-centric view of relaxed consistency models that describes them in terms of program behavior, not system optimizations.},
  keywords = {data integrity;shared memory systems;parallel programming;software performance evaluation;software portability;shared memory consistency models;performance;programmability;portability;computer professionals;performance-enhancing features;system designers;hardware-based shared memory systems;system optimizations;system-centric;programmer-centric;relaxed consistency models;program behavior;Tutorial;Magnetic heads;Programming profession;Hardware;High level languages;Read-write memory;Message passing;Optimizing compilers;Computer architecture;Software design},
}

@InProceedings{aspinall2007formalising,
  author    = {Aspinall, David and {\v{S}}ev{\v{c}}{\'i}k, Jaroslav},
  title     = {Formalising Java's Data Race Free Guarantee},
  booktitle = {Theorem Proving in Higher Order Logics},
  year      = {2007},
  editor    = {Schneider, Klaus and Brandt, Jens},
  pages     = {22--37},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We formalise the data race free (DRF) guarantee provided by Java, as captured by the semi-formal Java Memory Model (JMM) [1] and published in the Java Language Specification [2].The DRF guarantee says that all programs which are correctly synchronised (i.e., free of data races) can only have sequentially consistent behaviours. Such programs can be understood intuitively by programmers. Formalisation has achieved three aims. First, we made definitions and proofs precise, leading to a better understanding; our analysis found several hidden inconsistencies and missing details. Second, the formalisation lets us explore variations and investigate their impact in the proof with the aim of simplifying the model; we found that not all of the anticipated conditions in the JMM definition were actually necessary for the DRF guarantee. This allows us to suggest a quick fix to a recently discovered serious bug [3] without invalidating the DRF guarantee. Finally, the formal definition provides a basis to test concrete examples, and opens the way for future work on JMM-aware logics for concurrent programs.},
  isbn      = {978-3-540-74591-4},
}

@InProceedings{manson2005java,
  author    = {Manson, Jeremy and Pugh, William and Adve, Sarita V.},
  title     = {The Java Memory Model},
  booktitle = {Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2005},
  series    = {POPL '05},
  publisher = {ACM},
  location  = {Long Beach, California, USA},
  isbn      = {1-58113-830-X},
  pages     = {378--391},
  doi       = {10.1145/1040305.1040336},
  url       = {http://doi.acm.org/10.1145/1040305.1040336},
  acmid     = {1040336},
  address   = {New York, NY, USA},
  keywords  = {Java, concurrency, memory model, multithreading},
  numpages  = {14},
}

@Online{manson2004jsr133,
  author = {Jeremy Manson and Brian Goetz},
  title  = {JSR 133 (Java Memory Model) FAQ},
  year   = {2004},
  date   = {2004-02-01},
  url    = {https://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html},
}

@Report{pugh2004jsr133,
  author = {William Pugh and Sarita Adve and Doug Lea},
  title  = {JSR-133: Java\texttrademark Memory Model and Thread Specification},
  type   = {resreport},
  year   = {2004},
  date   = {2004-08-24},
}


@Article{adve1993unified,
  author   = {S. V. Adve and M. D. Hill},
  title    = {A unified formalization of four shared-memory models},
  journal  = {IEEE Transactions on Parallel and Distributed Systems},
  year     = {1993},
  volume   = {4},
  number   = {6},
  pages    = {613-624},
  month    = {June},
  issn     = {1045-9219},
  abstract = {The authors present a data-race-free-1, shared-memory model that unifies four earlier models: weak ordering, release consistency (with sequentially consistent special operations), the VAX memory model, and data-race-free-0. Data-race-free-1 unifies the models of weak ordering, release consistency, the VAX, and data-race-free-0 by formalizing the intuition that if programs synchronize explicitly and correctly, then sequential consistency can be guaranteed with high performance in a manner that retains the advantages of each of the four models. Data-race-free-1 expresses the programmer's interface more explicitly and formally than weak ordering and the VAX, and allows an implementation not allowed by weak ordering, release consistency, or data-race-free-0. The implementation proposal for data-race-free-1 differs from earlier implementations by permitting the execution of all synchronization operations of a processor even while previous data operations of the processor are in progress. To ensure sequential consistency, two sychronizing processors exchange information to delay later operations of the second processor that conflict with an incomplete data operation of the first processor.<<ETX>>},
  doi      = {10.1109/71.242161},
  keywords = {hazards and race conditions;shared memory systems;multiprocessors;formalization;shared-memory models;data-race-free-1;weak ordering;release consistency;data-race-free-0;sequential consistency;Multiprocessing systems;Programming profession;Proposals;Delay;Formal specifications;Logic;Optimization;Hardware;Out of order},
}

@Report{gosling2018jls11,
  author      = {James Gosling and Bill Joy and Guy Steele and Gilad Bracha and Alex Buckley and Daniel Smith},
  title       = {The Java\textregistered Language Specification},
  year        = {2018},
  date        = {2018-08-21},
  institution = {Oracle},
  subtitle    = {Java SE 11 Edition},
  url         = {https://docs.oracle.com/javase/specs/jls/se11/html/index.html},
  urldate     = {2018-12-03},
}

@PhdThesis{adve1993designing,
  author      = {Adve, Sarita Vikram},
  title       = {Designing memory consistency models for shared-memory multiprocessors},
  year        = {1993},
  date        = {1993-12-01},
  institution = {University of Wisconsin-Madison},
  publisher   = {University of Wisconsin--Madison},
  volume      = {2},
}

@Book{attiya2004distributed,
  author =    {Attiya, Hagit and Welch, Jennifer},
  title =     {Distributed computing: fundamentals, simulations, and advanced topics},
  year =      {2004},
  volume =    {19},
  publisher = {John Wiley \& Sons},
}
